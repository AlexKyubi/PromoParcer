import requests
import pathlib
import openpyxl
from io import BytesIO
from openpyxl.styles import Font
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from tqdm import tqdm
import subprocess


class PromoParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–∫—Ü–∏–π —Å —Å–∞–π—Ç–æ–≤ Sulpak, Mechta –∏ Technodom."""



    def __init__(self, output_file="promotions.xlsx"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–∞—Ä—Å–µ—Ä–∞.
        :param output_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–∫—Ü–∏–∏.
        """
        self.SULPAK_URL = "https://www.sulpak.kz/Stocks"
        self.MECHTA_URL = "https://www.mechta.kz/useful/shares/"
        self.TECHNODOM_URL = "https://www.technodom.kz/cms/promo"
        self.file_path = pathlib.Path(output_file)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium (–±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞)
        self.chrome_options = Options()
        self.chrome_options.add_argument("--headless")
        self.chrome_options.add_argument("--disable-gpu")
        self.chrome_options.add_argument("--no-sandbox")
        self.chrome_options.add_argument("--disable-dev-shm-usage")
        self.chrome_options.add_argument("--log-level=3")  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
        self.chrome_options.add_argument("--silent")  # –î–µ–ª–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Ç–∏—Ö–∏–º
        self.chrome_options.add_argument("--disable-logging")  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏
        self.chrome_options.add_argument("--disable-blink-features=AutomationControlled")  # –ú–∞—Å–∫–∏—Ä—É–µ–º Selenium
        self.chrome_options.add_argument("--disable-webgl")
        self.chrome_options.add_argument("--disable-gpu-compositing")
        self.chrome_options.add_argument("--disable-software-rasterizer")
        self.chrome_options.add_argument("--disable-3d-apis")
        self.chrome_options.add_argument("--remote-debugging-port=0")  # –£–±–∏—Ä–∞–µ–º DevTools logging
        self.chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36")
        self.service = Service(ChromeDriverManager().install(), log_output=subprocess.DEVNULL)

     
    

    def fetch_html(self,url):
        """–ü–æ–ª—É—á–∞–µ—Ç HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Sulpak)."""
        try:
            response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            response.raise_for_status()
            return response.text
        except requests.exceptions.Timeout:
            print(f"‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {url}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

    def parse_sulpak(self):
        """–ü–∞—Ä—Å–∏—Ç –∞–∫—Ü–∏–∏ —Å Sulpak.kz."""
        print(f"[üîç –ü–∞—Ä—Å–∏–Ω–≥ Sulpak] {self.SULPAK_URL}")

        html = self.fetch_html(self.SULPAK_URL)
        if not html:
            return []

        soup = BeautifulSoup(html, "html.parser")
        promotions = []

        promo_blocks = soup.find_all("div", class_="actions__item-name")

        for promo in tqdm(promo_blocks, desc="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ü–∏–∏ Sulpak"):
            title = promo.get_text(strip=True)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
            description_tag = promo.find_next("div", class_="actions__item-text")  # –û–ø–∏—Å–∞–Ω–∏–µ
            period_tag = promo.find_next("div", class_="actions__item-period")  # –ü–µ—Ä–∏–æ–¥

            if title:
                promotions.append([
                    title,
                    description_tag.get_text(strip=True) if description_tag else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                    period_tag.get_text(strip=True) if period_tag else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                ])

        return promotions

    def parse_mechta(self):
        """–ü–∞—Ä—Å–∏—Ç –∞–∫—Ü–∏–∏ —Å Mechta.kz (—á–µ—Ä–µ–∑ Selenium) —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É ?page=."""
        print(f"[üîç –ü–∞—Ä—Å–∏–Ω–≥ Mechta] {self.MECHTA_URL}")

        try:
            driver = webdriver.Chrome(service=self.service, options=self.chrome_options)
            all_promotions = []
            page = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            MAX_PAGES = 5  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è
            last_page_source = ""  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü

            while page <= MAX_PAGES:  # –ù–µ –¥–∞–µ–º –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                url = f"{self.MECHTA_URL}?page={page}"
                print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}: {url}")
                driver.get(url)

                # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å –∞–∫—Ü–∏–µ–π
                try:
                    WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CLASS_NAME, "column"))
                    )
                except:
                    print("üö´ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    break  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å, –∑–Ω–∞—á–∏—Ç, —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å

                html = driver.page_source

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
                if html == last_page_source:
                    print("üö´ –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.")
                    break
                last_page_source = html  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

                soup = BeautifulSoup(html, "html.parser")

                # üîπ –ò—â–µ–º –∞–∫—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                promo_blocks = soup.find_all("div", class_="column")

                if not promo_blocks:
                    print("üö´ –ê–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.")
                    break  # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∞–∫—Ü–∏–π, –≤—ã—Ö–æ–¥–∏–º

                for promo in tqdm(promo_blocks, desc=f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ü–∏–∏ Mechta:"):
                    title_tag = promo.find("p", class_="text-color3 text-ts3")  # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
                    date_tag = promo.find("p", class_="text-color1 text-ts1 text-bold")  # –î–∞—Ç—ã
                    description_tag = promo.find("p", class_="text-color1 text-ts3 col")  # –û–ø–∏—Å–∞–Ω–∏–µ
                    
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å—Å—ã–ª–∫—É
                    link_tag = promo.find_next("a", href=True)  # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–≥ <a>
                    link = link_tag['href'] if link_tag else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"

                    if title_tag:
                        all_promotions.append([
                            title_tag.get_text(strip=True),
                            description_tag.get_text(strip=True) if description_tag else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                            date_tag.get_text(strip=True) if date_tag else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            link
                        ])

                page += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            driver.quit()
            return all_promotions

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å Selenium: {e}")
            return []



    def parse_technodom(self):
        """–ü–∞—Ä—Å–∏—Ç –∞–∫—Ü–∏–∏ —Å Technodom.kz (—á–µ—Ä–µ–∑ Selenium)."""
        print("[üîç –ü–∞—Ä—Å–∏–Ω–≥ Technodom]")

        try:
            # –ó–∞–ø—É—Å–∫ Selenium
            driver = webdriver.Chrome(service=self.service, options=self.chrome_options)
            driver.get(self.TECHNODOM_URL)

            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å –∞–∫—Ü–∏–µ–π
            driver.implicitly_wait(5)

            promotions = []
            
            # –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–º–æ-–±–ª–æ–∫–∏
            promo_blocks = driver.find_elements(By.CLASS_NAME, "promo__info")
            
            for promo in  tqdm(promo_blocks, desc="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ü–∏–∏ Technodom:"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ü–∏–∏
                heading = promo.find_element(By.CLASS_NAME, "promo__heading").text
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
                text = promo.find_element(By.CLASS_NAME, "promo__text").text
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
                link = promo.find_element(By.CLASS_NAME, "promo__heading-link").get_attribute("href")

                promotions.append([heading, text, link])

            driver.quit()
            return promotions

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Technodom: {e}")
            return []



    def save_to_excel(self, sulpak_data, mechta_data, technodom_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel-—Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        workbook = openpyxl.Workbook()

        # üî¥ –õ–∏—Å—Ç Sulpak
        sheet_sulpak = workbook.active
        sheet_sulpak.title = "Sulpak"
        sheet_sulpak.append(["–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ü–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏"])
        for row in sulpak_data:
            sheet_sulpak.append(row)

        # üîµ –õ–∏—Å—Ç Mechta (—Ç–µ–ø–µ—Ä—å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!)
        sheet_mechta = workbook.create_sheet(title="Mechta")
        sheet_mechta.append(["–ü–µ—Ä–∏–æ–¥ –∞–∫—Ü–∏–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Å—ã–ª–∫–∞"])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Å—ã–ª–∫–∏

        for row in mechta_data:
            period, title, description, link = row  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            
            if link.startswith("http"):
                sheet_mechta.append([period, title, description, link])  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                last_row = sheet_mechta.max_row
                link_cell = sheet_mechta.cell(row=last_row, column=4)  # –ö–æ–ª–æ–Ω–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π
                link_cell.hyperlink = link  # –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
                link_cell.font = Font(color="0000FF", underline="single")  # –°—Ç–∏–ª–∏–∑—É–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
            else:
                sheet_mechta.append([period, title, description, "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"])  # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç

        # üü¢ –õ–∏—Å—Ç Technodom (—Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏)
        sheet_technodom = workbook.create_sheet(title="Technodom")
        sheet_technodom.append(["–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Å—ã–ª–∫–∞"])

        for row in technodom_data:
            title, description, link = row

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
            if link.startswith("http"):
                cell = sheet_technodom.append([title, description, link])  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —è—á–µ–π–∫—É
                last_row = sheet_technodom.max_row
                link_cell = sheet_technodom.cell(row=last_row, column=3)
                link_cell.hyperlink = link  # –î–µ–ª–∞–µ–º —è—á–µ–π–∫—É –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
                link_cell.font = Font(color="0000FF", underline="single")  # –°—Ç–∏–ª–∏–∑—É–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
            else:
                sheet_technodom.append([title, description, "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"])  # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç


        try:
            # üìå **–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å, –∞ –Ω–µ –Ω–∞ –¥–∏—Å–∫**
            # output = BytesIO()
            # workbook.save(output)
            # output.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–≤–∞–∂–Ω–æ!)
            # return output  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
            workbook.save(self.file_path)
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {self.file_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É."""
        sulpak_promotions = self.parse_sulpak()
        mechta_promotions = self.parse_mechta()
        technodom_promotions = self.parse_technodom()
        return self.save_to_excel(sulpak_promotions, mechta_promotions, technodom_promotions)
    

# ‚úÖ **–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é**
if __name__ == "__main__":
    parser = PromoParser()
    excel_file = parser.run()
   


    # **************************************************************** —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∞—Å—Å–∞. –≤—Å—Ç–∞–≤–∏—Ç—å –≤ main function
    # from Parcer import PromoParser  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä

    # def send_promotions(update: Update, context: CallbackContext):
    #     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª —Å –∞–∫—Ü–∏—è–º–∏ –≤ –≤–∏–¥–µ Excel-–¥–æ–∫—É–º–µ–Ω—Ç–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫)."""
    #     parser = PromoParser()
    #     excel_file = parser.run()  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ (BytesIO)
    #     update.message.reply_document(document=excel_file, filename="promotions.xlsx")